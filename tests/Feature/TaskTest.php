<?php

namespace Tests\Feature;

use App\Enums\TaskStatus;
use App\Models\Task;
use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Support\Collection;
use Illuminate\Support\Facades\Hash;
use Laravel\Sanctum\Sanctum;
use PHPUnit\Framework\Attributes\Test;
use Tests\TestCase;

class TaskTest extends TestCase
{
    use RefreshDatabase;

    protected Collection $task;
    protected User $user;
    protected User $userTwo;
    protected Task $otherTask;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->withExceptionHandling();

        $this->user = User::factory()->create();

        $this->userTwo = User::factory()->create();

        $this->task = Task::factory(10)->for($this->user)->create();

        $this->otherTask = Task::factory()->for($this->userTwo)->create();
    }

    #[Test]
    public function index_without_auth_test()
    {
        $response = $this->getJson(route('api.tasks.index'));

        $response->assertStatus(401);
    }

    #[Test]
    public function index_test(): void
    {
        Sanctum::actingAs($this->user, ['user:*']);

        $this->assertAuthenticatedAs($this->user, 'sanctum');

        $response = $this->getJson(route('api.tasks.index'));

        $response->assertStatus(200);
    }

    #[Test]
    public function show_task_test(): void
    {
        Sanctum::actingAs($this->user, ['user:*']);

        $this->assertAuthenticatedAs($this->user, 'sanctum');

        $task = $this->task->first();

        $response = $this->getJson(route('api.tasks.show', ['task' => $task->id]), [
            'Content-Type' => 'application/json'
        ]);

        $response->assertStatus(200);
    }

    #[Test]
    public function show_forbidden_task_test()
    {
        Sanctum::actingAs($this->user, ['user:*']);

        $response = $this->getJson(route('api.tasks.show',[
            'task' => $this->otherTask->id
        ]));

        $response->assertStatus(403);
    }

    #[Test]
    public function create_task_test()
    {
        Sanctum::actingAs($this->user, ['user:*']);

        $this->assertAuthenticatedAs($this->user, 'sanctum');

        $requestData = [
            'title' => 'Test',
            'description' => 'asdasdasdad',
            'status' => (string)TaskStatus::IN_PROGRESS->value,
            'started_at' => now()->addDays(1),
            'ended_at' => now()->addWeeks(2)
        ];

        $response = $this->postJson(route('api.tasks.store'), $requestData, [
            "Content-Type" => "application/json"
        ]);

        $response->assertStatus(201);

        $this->assertDatabaseHas('tasks', [
            'title' => 'Test'
        ]);
    }

    #[Test]
    public function task_update_status_test()
    {
        Sanctum::actingAs($this->user,['user:*']);

        $this->assertAuthenticatedAs($this->user,'sanctum');

        $response = $this->patchJson(route('api.tasks.update_status',$this->task->first()->id),[
            'status' => (string)TaskStatus::DONE->value
        ]);

        $response->assertStatus(200);

        $response->assertJson([
            'status' => 'updated'
        ]);
    }

    #[Test]
    public function update_task_test()
    {
        Sanctum::actingAs($this->user,['user:*']);

        $this->assertAuthenticatedAs($this->user,'sanctum');

        $requestData = [
            'title' => 'Updated task'
        ];

        $response = $this->patchJson(route('api.tasks.update',$this->task->first()->id),$requestData);

        $response->assertStatus(200);

        $response->assertJson($requestData);
    }


    #[Test]
    public function destroy_task_test()
    {
        Sanctum::actingAs($this->user,['user:*']);

        $this->assertAuthenticatedAs($this->user,'sanctum');

        $task = $this->task->first();

        $response = $this->deleteJson(route('api.tasks.destroy',$task->id));

        $response->assertNoContent();

        $response->assertStatus(204);

        $this->assertDatabaseMissing('tasks',[
            'id' => $task->id
        ]);
    }
}
